generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  channels  Channel[]
  members   Member[]
  servers   Server[]
}

model Server {
  id            Int             @id @default(autoincrement())
  name          String
  imageUrl      String
  inviteCode    String          @unique
  profileId     Int
  channels      Channel[]
  DirectMessage DirectMessage[]
  members       Member[]
  profile       Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Member {
  id                      Int             @id @default(autoincrement())
  profileId               Int
  serverId                Int
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  Conversation            Conversation[]
  conversationsInitiated  Conversation[]  @relation("MemberOne")
  conversationsInitiated2 Conversation[]  @relation("MemberTwo")
  directMessages          DirectMessage[]
  profile                 Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Server                  Server          @relation(fields: [serverId], references: [id])
  messages                Message[]

  @@index([profileId, serverId])
}

model Channel {
  id        Int         @id @default(autoincrement())
  name      String
  type      ChannelType @default(TEXT)
  profileId Int
  serverId  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId, serverId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?
  memberId  Int
  channelId Int
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId, channelId])
}

model DirectMessage {
  id             Int          @id @default(autoincrement())
  content        String
  file           String?
  memberId       Int
  conversationId Int
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  serverId       Int?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  server         Server?      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([memberId, conversationId])
}

model Conversation {
  id             Int             @id @default(autoincrement())
  memberOneId    Int
  memberTwoId    Int
  reatedAt       DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deleted        Boolean         @default(false)
  memberId       Int?
  Member         Member?         @relation(fields: [memberId], references: [id])
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  VIDEO
  AUDIO
}
